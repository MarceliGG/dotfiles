#+TITLE:Emacs Config
#+STARTUP: showeverything

* TABLE OF CONTENTS                                                     :toc:
- [[#load-first][LOAD FIRST]]
  - [[#package-manager][Package Manager]]
  - [[#evil-mode][Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#gui][GUI]]
  - [[#font][Font]]
  - [[#disable-menubar-toolbar-etc][Disable Menubar, Toolbar, etc.]]
  - [[#line-numbers][Line Numbers]]
  - [[#icons][Icons]]
  - [[#theme][Theme]]
  - [[#rainbow-mode][Rainbow Mode]]
- [[#org-mode][ORG MODE]]
  - [[#table-of-contents][Table of Contents]]
  - [[#bullets][Bullets]]
  - [[#fix-indent][Fix Indent]]
  - [[#quick-source-code-blocks][Quick Source Code Blocks]]
- [[#sudo-edit][SUDO EDIT]]
- [[#ivy--counsel][IVY & COUNSEL]]
- [[#vterm][VTERM]]
- [[#dashboard][DASHBOARD]]
- [[#lsp][LSP]]
  - [[#lsp-mode][LSP Mode]]
  - [[#python][Python]]
  - [[#rust][Rust]]
  - [[#company-mode][Company Mode]]
  - [[#javascript][Javascript]]

* LOAD FIRST
** Package Manager
Setup Elpaca Package Manager 
#+BEGIN_SRC emacs-lisp
(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
  :ref nil :depth 1
  :files (:defaults "elpaca-test.el" (:exclude "extensions"))
  :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
  (build (expand-file-name "elpaca/" elpaca-builds-directory))
  (order (cdr elpaca-order))
  (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
      (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
        ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
          ,@(when-let ((depth (plist-get order :depth)))
            (list (format "--depth=%d" depth) "--no-single-branch"))
          ,(plist-get order :repo) ,repo))))
        ((zerop (call-process "git" nil buffer t "checkout"
          (or (plist-get order :ref) "--"))))
        (emacs (concat invocation-directory invocation-name))
        ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
           "--eval" "(byte-recompile-directory \".\" 0 'force)")))
        ((require 'elpaca))
        ((elpaca-generate-autoloads "elpaca" repo)))
          (progn (message "%s" (buffer-string)) (kill-buffer buffer))
        (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+END_SRC

** Evil Mode
#+BEGIN_SRC emacs-lisp
;; Install a package via the elpaca macro
;; See the "recipes" section of the manual for more details.

;; (elpaca example-package)

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :ensure t :demand t)
;;(elpaca-wait)

;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil :demand t :ensure t
  :init
  ;; (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (evil-mode))
(use-package evil-collection :ensure t
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))

;;Turns off elpaca-use-package-mode current declaration
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
(use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
(elpaca nil (message "deferred"))

;; Evil use system clipboard
(setq select-enable-clipboard t)
#+END_SRC

** General Keybindings
#+BEGIN_SRC emacs-lisp
(use-package general :ensure t
  :config
  (general-evil-setup)

  ;; leader key
  (general-create-definer leader-key
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC" ;; set leader in insert
  )
  (leader-key
    "t" '(term :wk "Terminal")

    "b" '(:ignore t :wk "buffer")
      "bs" '(switch-to-buffer :wk "Switch buffer")
      "bk" '(kill-this-buffer :wk "Kill this buffer")
      "bn" '(next-buffer :wk "Next buffer")
      "bp" '(previous-buffer :wk "Previous buffer")
      "br" '(revert-buffer :wk "Reload buffer")
      "bb" '(ibuffer :wk "Ibuffer")

    "f" '(:ignore t :wk "file")
      "fs" '(save-buffer :wk "Save file")
      "ff" '(find-file :wk "Find file")
      "fr" '(counsel-recentf :wk "Find recent file")
      "fc" '((lambda () (interactive) (find-file "~/.config/")) :wk "Open config dir in dired")
      "fC" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config file")

    "c" '(lsp-format-buffer :wk "Format code")
    "l" '(lsp :wk "Start lsp")
   )
   (global-set-key (kbd "C-s")' save-buffer)
 ) 

    (use-package which-key :ensure t
    :init
      (which-key-mode 1)
  :config
    (setq which-key-side-window-location 'bottom
      which-key-sort-order #'which-key-key-order-alpha
      which-key-sort-uppercase-first nil
    )
  )
#+END_SRC

* GUI
** Font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
  :font "FiraCode Nerd Font Mono"
  :height 100
  :weight 'medium
)
;;(set-face-attribute 'fixed-pitch nil
;;  :font "FiraCode Nerd Font Mono"
;;  :height 110
;;  :weight 'medium
;;)
#+END_SRC

** Disable Menubar, Toolbar, etc.
#+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (fringe-mode -1)
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
  
  ;; Status bar clumn number
  (setq column-number-mode t)
#+END_SRC

** Icons
#+begin_src emacs-lisp
  (use-package nerd-icons
    :ensure t)

  (use-package nerd-icons-dired
    :ensure t
    :hook
    (dired-mode . nerd-icons-dired-mode))

  (use-package nerd-icons-ibuffer
    :ensure t
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Theme
#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "/home/marcel/.config/emacs/themes/")
(load-theme 'custom-blueish t)
#+end_src

** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook org-mode prog-mode)
#+end_src

* ORG MODE
** Table of Contents
#+BEGIN_SRC emacs-lisp
(use-package toc-org :ensure t
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable)
)
#+END_SRC

** Bullets
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** Fix Indent
#+BEGIN_SRC emacs-lisp
  (electric-indent-mode -1)
  (setq org-edit-src-content-indentation 0)
#+END_SRC

** Quick Source Code Blocks
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
#+END_SRC

* SUDO EDIT
#+begin_src emacs-lisp
  (use-package sudo-edit :ensure t
    :config 
    (leader-key
    "fu" '(sudo-edit :wk "Sudo edit file")
  ))
#+end_src

* IVY & COUNSEL
#+begin_src emacs-lisp
 (use-package counsel
   :ensure t
   :after ivy
   :config (counsel-mode))

 (use-package ivy
   :ensure t
   :bind
   ;; ivy-resume resumes the last Ivy-based completion.
   (("C-c C-r" . ivy-resume)
    ("C-x B" . ivy-switch-buffer-other-window))
   :custom
   (setq ivy-use-virtual-buffers t)
   (setq ivy-count-format "(%d/%d) ")
   (setq enable-recursive-minibuffers t)
   :config
   (ivy-mode))

 (use-package nerd-icons-ivy-rich
   :ensure t
   :init
   (nerd-icons-ivy-rich-mode 1)
   )

 (use-package ivy-rich
   :after ivy
   :ensure t
   :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
   :custom
   (ivy-virtual-abbreviate 'full
    ivy-rich-switch-buffer-align-virtual-buffer t
    ivy-rich-path-style 'abbrev)
   :config
   (ivy-set-display-transformer 'ivy-switch-buffer
      'ivy-rich-switch-buffer-transformer))
#+end_src

* VTERM
#+begin_src emacs-lisp
  (use-package vterm :ensure t)
  (add-hook 'vterm-mode-hook
    (lambda ()
      (set (make-local-variable 'buffer-face-mode-face) '(:family "Fira Code Nerd Font Mono"))
      (buffer-face-mode t)))
#+end_src

* DASHBOARD
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;;(setq dashboard-startup-banner "/home/dt/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 10)))

  :config
  (dashboard-setup-startup-hook))
#+end_src

* LSP
** LSP Mode
#+begin_src emacs-lisp
(use-package lsp-mode
:ensure t
:init
(setq lsp-auto-guess-root t)
)
#+end_src

** Python
#+begin_src emacs-lisp
(use-package lsp-pyright
  :ensure t
)

(use-package python-mode
  :ensure t
  :hook
  (python-mode . lsp-deferred))
#+end_src

** Rust
#+begin_src emacs-lisp
(use-package rust-mode :ensure t
:hook
  (rust-mode . lsp-deferred)
)
#+end_src

** Company Mode
#+begin_src emacs-lisp
(use-package company :ensure t)
(setq company-minimum-prefix-length 1
      company-idle-delay 0.0) ;; default is 0.2

(use-package company-box :ensure t
:after company
  :hook (company-mode . company-box-mode))
#+end_src

** Javascript
#+begin_src emacs-lisp
(use-package lsp-biome
:ensure t)
#+end_src
